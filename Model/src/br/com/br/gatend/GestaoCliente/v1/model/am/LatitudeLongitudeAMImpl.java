package br.com.br.gatend.GestaoCliente.v1.model.am;


import br.com.br.gatend.GestaoCliente.v1.model.am.common.LatitudeLongitudeAM;

import br.com.br.gatend.GestaoCliente.v1.model.vo.ConsultaGoogleMapsReturnVOImpl;

import br.com.br.gatend.GestaoCliente.v1.model.vo.ConsultaGoogleMapsReturnVORowImpl;
import br.com.br.gatend.GestaoCliente.v1.webservice.consultalatlong.BPELConsultaGoogleLatLong.BPELConsultaGoogleLatLong_PortType;
import br.com.br.gatend.GestaoCliente.v1.webservice.consultalatlong.BPELConsultaGoogleLatLong.BPELConsultaGoogleLatLong_ServiceLocator;
import br.com.br.gatend.GestaoCliente.v1.webservice.consultalatlong.pcbpel.InputParameters;
import br.com.br.gatend.GestaoCliente.v1.webservice.consultalatlong.pcbpel.OutputParameters;

import br.com.br.gatend.GestaoCliente.v1.webservice.consultalatlong.pcbpel.U536_CONSULTA_GOOGLE_PK_T_U52;


import br.com.br.gatend.GestaoCliente.v1.webservice.consultalatlong.pcbpel.U536_CONSULTA_GOOGLE_PK_T_U53;

import java.io.IOException;

import java.math.BigDecimal;

import java.rmi.RemoteException;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.Map;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;

import oracle.svcmsg.ServiceException;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 13 11:21:10 BRT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LatitudeLongitudeAMImpl extends ApplicationModuleImpl implements LatitudeLongitudeAM {
    /**
     * This is the default constructor (do not remove).
     */
    public LatitudeLongitudeAMImpl() {
    }
        
    private static String URL_CONSULTA_GOOGLE_MAPS = "http://sbr00ap51.br.biz:7784/orabpel/default/BPELConsultaGoogleLatLong/1.0";
    
    protected PreparedStatement stmt;
    protected ResultSet rs;    
      
      
        
    public void consultarLatitudeLongitude(Map parametros) {
        
        String cliente = (String) parametros.get("cliente");
        String codR3 = (String) parametros.get("codR3");
        String latitude = (String) parametros.get("latitude");
        String longitude = (String) parametros.get("longitude");
        String endereco = (String) parametros.get("endereco");
        String pais = (String) parametros.get("pais");
        String estado = (String) parametros.get("estado");
        String bairro = (String) parametros.get("bairro");
        String municipio = (String) parametros.get("municipio");
        String cep = (String)parametros.get("cep");
        
        try {
            
            consultaGoogleMaps(endereco, bairro, cep, municipio, estado, pais);
            
        } catch (Exception e) {
           e.printStackTrace();
        }
    }
    
    
    public boolean confirmarLatitudeLongitude(Map parametros) {
        Boolean ok = false;

        String chaveUsuario = this.parseTexto(parametros.get("chaveUsuario"));
        String latitude = this.parseTexto(parametros.get("latitude"));
        String longitude = this.parseTexto(parametros.get("longitude"));
        String cliente = this.parseTexto(parametros.get("cliente"));
        String codR3 = this.parseTexto(parametros.get("codR3"));

        ok = atualizaLatitudeLongitude(latitude, longitude, cliente, codR3, chaveUsuario);

        return ok;
    }

    private void consultaGoogleMaps(String endereco, String bairro, String cep, String municipio, String estado,
                                    String pais) throws IOException, Exception {

        ConsultaGoogleMapsReturnVOImpl vo = this.getConsultaGoogleMapsReturnVO1();
        String precisaoRtn = "";
        String logradouroRtn = "";
        String bairroRtn = "";
        String cepRtn = "";
        String cidadeRtn = "";
        String estadoRtn = "";
        String paisRtn = "";
        String latitudeRtn = "";
        String longitudeRtn = "";

        String codigoRtn = "";
        String mensagemRtn = "";
        String descricaoRtn = "";

        /*TODO Mockado...**/
        /*OutputParameters out = this.bpelCosultaGoogleLatitudeLongitude(
                        "Rua Marechal Deodoro", 
                        "Centro", 
                        "80020320", 
                        "Curitiba", 
                        "PR", 
                        "Brasil");*/
        
        OutputParameters out = this.bpelCosultaGoogleLatitudeLongitude(
                        endereco, 
                        bairro, 
                        cep, 
                        municipio, 
                        estado, 
                        pais);
        
        if(!out.getP_OBJ_CONSULTA_OUTPUT().getERRO().getCODIGO().equalsIgnoreCase("")) {
                        
                codigoRtn = out.getP_OBJ_CONSULTA_OUTPUT().getERRO().getCODIGO();
                mensagemRtn = out.getP_OBJ_CONSULTA_OUTPUT().getERRO().getMENSAGEM();
                descricaoRtn = out.getP_OBJ_CONSULTA_OUTPUT().getERRO().getDESCRICAO();
                throw new Exception("Erro: " + codigoRtn + " - " + mensagemRtn + " - " + descricaoRtn);
            
        } else {
            
            vo.executeEmptyRowSet();
            
            U536_CONSULTA_GOOGLE_PK_T_U52[] item = out.getP_OBJ_CONSULTA_OUTPUT().getVARRAY_RESPOSTA();
            for (U536_CONSULTA_GOOGLE_PK_T_U52 t52 : item) {

                precisaoRtn = t52.getPRECISAO();
                logradouroRtn            = t52.getENDERECO().getLOGRADOURO();
                bairroRtn                = t52.getENDERECO().getBAIRRO();
                cepRtn                   = t52.getENDERECO().getCEP();
                cidadeRtn                = t52.getENDERECO().getCIDADE();
                estadoRtn                = t52.getENDERECO().getESTADO();
                paisRtn                  = t52.getENDERECO().getPAIS();
                latitudeRtn              = t52.getLATITUDE();
                longitudeRtn             = t52.getLONGITUDE();

    
                Row row = vo.createRow();
    
                row.setAttribute("endereco", logradouroRtn);
                row.setAttribute("bairro", bairroRtn);
                row.setAttribute("cep", cepRtn);
                row.setAttribute("cidade", cidadeRtn);
                row.setAttribute("estado", estadoRtn);
                row.setAttribute("pais", paisRtn);
                row.setAttribute("latitude", latitudeRtn);
                row.setAttribute("longitude", longitudeRtn);
                row.setAttribute("booleanRadio", Boolean.FALSE);
                row.setAttribute("disableRadio", Boolean.FALSE);
                /*row.setAttribute("booleanRadio", latitudeRtn+"|"+longitudeRtn+"|"+
                                                 logradouroRtn+"|"+bairroRtn+"|"+
                                                 estadoRtn+"|"+paisRtn);*/
                
                vo.insertRow(row);
          
            }
        }


    }

    public OutputParameters bpelCosultaGoogleLatitudeLongitude(String endereco, String bairro, String cep, String municipio, String estado,
                        String pais) throws Exception {
                            
            //Parametro de consulta
            U536_CONSULTA_GOOGLE_PK_T_U53 consultaU53 = new U536_CONSULTA_GOOGLE_PK_T_U53();
            
            //Request e Response
            InputParameters input = new InputParameters();
            OutputParameters output = new OutputParameters();
                
            
            //INPUT U536_CONSULTA_GOOGLE_PK_T_U53
            consultaU53.setLOGRADOURO(endereco);
            consultaU53.setBAIRRO(bairro);
            consultaU53.setCEP(cep);
            consultaU53.setCIDADE(municipio);
            consultaU53.setESTADO(estado);
            consultaU53.setPAIS(pais);
                      
            
            input.setP_OBJ_CONSULTA_INPUT(consultaU53);
                            
            
            BPELConsultaGoogleLatLong_PortType port = getBPELConsultaGoogleLatLongPort();
            
            try {
                output = port.process(input);
            } catch (RemoteException e) {
                throw new RemoteException("Não foi possível estabelecer conexão com o serviço " +
                    "BPEL Consulta Latitude e Longitude.");
            }
                                            
            return output;
    }
                            
    
    private BPELConsultaGoogleLatLong_PortType getBPELConsultaGoogleLatLongPort() throws Exception {
        BPELConsultaGoogleLatLong_ServiceLocator service = new BPELConsultaGoogleLatLong_ServiceLocator();
        service.setBPELConsultaGoogleLatLongPortEndpointAddress(URL_CONSULTA_GOOGLE_MAPS);
        BPELConsultaGoogleLatLong_PortType port = service.getBPELConsultaGoogleLatLongPort();
        return port;
    }
    
    public void alteraValorSelecionadoPeloIndice(Map parametros) {
        
        ConsultaGoogleMapsReturnVOImpl vo = this.getConsultaGoogleMapsReturnVO1();
                   
        Integer indice = (Integer) parametros.get("indice");
        Boolean selected = (Boolean) parametros.get("selected");
        
        if(vo != null) {
            for(int i = 0; i < vo.getRowCount(); i++) {
                
                ConsultaGoogleMapsReturnVORowImpl currentRow 
                    = (ConsultaGoogleMapsReturnVORowImpl) vo.getRowAtRangeIndex(i);
                
                /*Adiciona valor true a linha do VO indicado pelo indice
                 e desabilita os outros checkboxes*/
                if(i == indice) {
                    currentRow.setAttribute("booleanRadio", selected);
                    
                    for(int j = 0; j < vo.getRowCount(); j++) {
                        
                        ConsultaGoogleMapsReturnVORowImpl uncheckedRow 
                            = (ConsultaGoogleMapsReturnVORowImpl) vo.getRowAtRangeIndex(j);
                        if(j != indice) {
                            uncheckedRow.setAttribute("booleanRadio", Boolean.FALSE);
                            uncheckedRow.setAttribute("disableRadio", Boolean.TRUE);
                        } 
                                       
                    }
                    
                    //Se o checkbox for desmarcado, todos outros ficarão habilitados...
                    Boolean isChecked = (Boolean) currentRow.getAttribute("booleanRadio");
                    if(!isChecked) {
                        for(int z = 0; z < vo.getRowCount(); z++) {
                            
                            ConsultaGoogleMapsReturnVORowImpl uncheckedRow 
                                = (ConsultaGoogleMapsReturnVORowImpl) vo.getRowAtRangeIndex(z);
                            
                            uncheckedRow.setAttribute("disableRadio", Boolean.FALSE);
                                                                  
                        }
                    } 
                                        
                }
                                
            }
        }
        
    }
    
    private static String parseTexto(Object objeto) {
        String texto = "";
        try {
            if(objeto!=null) {
                texto = objeto.toString();
            }
        } catch(Exception e) {
            return "";
        }
        return texto;
    }


    private Boolean atualizaLatitudeLongitude(String latitude, String longitude, String cliente, String codR3,
                                              String chaveUsuario) {
        boolean atualizou = false;           
        BigDecimal userId = new BigDecimal("0");
        BigDecimal acctSiteID = new BigDecimal("0");
        
        StringBuilder update = new StringBuilder();
        
        try {
            
            userId = getUserId(chaveUsuario);
            acctSiteID = getAcctSiteId(cliente, codR3);
            
            update.append("UPDATE  HZ_CUST_SITE_USES_ALL SET ");
            update.append(" ATTRIBUTE1 = '"+latitude+"', ATTRIBUTE2 = '"+longitude+"', ");
            update.append(" LAST_UPDATED_BY  = '"+userId+"', LAST_UPDATE_DATE = SYSDATE ");
            update.append(" WHERE  cust_acct_site_id = '"+acctSiteID+"' ");
            update.append(" AND site_use_code = 'SHIP_TO' AND status = 'A'");
            
            stmt = getDBTransaction().createPreparedStatement(update.toString(), 1);
            int retorno = stmt.executeUpdate();
            
            getDBTransaction().commit();
            
            if(retorno == 1) atualizou = true;
                 
        } catch (SQLException e) {
            e.printStackTrace();
        }
             
           
        return atualizou;
    }   
    
    private BigDecimal getUserId(String usuarioLogado) throws SQLException {
        BigDecimal userId = new BigDecimal("0");
        
        final StringBuilder query = 
            new StringBuilder("SELECT user_id FROM fnd_user WHERE user_name = '"+usuarioLogado+"'");
        
        stmt = getDBTransaction().createPreparedStatement(query.toString(), 1);
        rs = stmt.executeQuery();
        
        if(rs.next()) {
            userId = rs.getBigDecimal("user_id");
        }
        
        return userId;
    }
    
    private BigDecimal getAcctSiteId(String cliente, String codigoR3) throws SQLException {
        
        BigDecimal acctSiteId = new BigDecimal(0);
        
        final StringBuilder query = new StringBuilder("");
        query.append("SELECT hz_cust.cust_acct_site_id as acctID FROM U707_GC_LATITUDE_LONGITUDE_V lat_long, ");
        query.append(" HZ_CUST_ACCT_SITES_ALL hz_cust WHERE lat_long.party_site_id = hz_cust.party_site_id ");

        if (!cliente.equalsIgnoreCase("")) {
            query.append(" AND lat_long.party_site_id = '" + cliente + "'");
        } 
        if (!codigoR3.equalsIgnoreCase("")) {
            query.append(" AND lat_long.cod_temp_r3 = '" + codigoR3 + "'");
        }

        if(!cliente.equalsIgnoreCase("") || !codigoR3.equalsIgnoreCase("")) {
            stmt = getDBTransaction().createPreparedStatement(query.toString(), 1);
            rs = stmt.executeQuery();
            if (rs.next()) {
                acctSiteId = rs.getBigDecimal("acctID");
            }
        }

        return acctSiteId;
    }
    
    public void emptyTableLatLong() {
        this.getConsultaGoogleMapsReturnVO1().executeEmptyRowSet();
    }

    /**
     * Container's getter for ConsultaGoogleMapsReturnVO1.
     * @return ConsultaGoogleMapsReturnVO1
     */
    public ConsultaGoogleMapsReturnVOImpl getConsultaGoogleMapsReturnVO1() {
        return (ConsultaGoogleMapsReturnVOImpl) findViewObject("ConsultaGoogleMapsReturnVO1");
    }
    
}

