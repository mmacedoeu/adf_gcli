package br.com.br.gatend.GestaoCliente.v1.model.am;

import br.com.br.gatend.GestaoCliente.v1.model.am.common.CancelarClienteAM;
import br.com.br.gatend.GestaoCliente.v1.model.vo.ArLocationValuesVImpl;
import br.com.br.gatend.GestaoCliente.v1.model.vo.ConsultaClientesVOImpl;

import br.com.br.gatend.GestaoCliente.v1.model.vo.FndUserVOImpl;

import br.com.br.gatend.GestaoCliente.v1.model.vo.U536BrRolesMenuVVOImpl;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import java.sql.SQLException;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.ADFContext;
import oracle.adf.share.security.SecurityContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 23 16:19:15 BRT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CancelarClienteAMImpl extends ApplicationModuleImpl implements CancelarClienteAM {
    /**
     * This is the default constructor (do not remove).
     */
    public CancelarClienteAMImpl() {
    }
    
    private static String ROLE_GESTAO_CLIENTE = "Role Gestão de Clientes";
    protected PreparedStatement stmt;
    protected ResultSet rs;  
    protected CallableStatement cStmt;

    /**
     * Method responsible for locating Client from full CNPJ
     *
     * @param parametros
     * @return Objetc String
     */
    public String localizaCnpjCompleto(Map parametros) {
        String result = "";
        String tipoCliente = (String) parametros.get("campoTipoCliente");
        String nomeCriteria = "ConsultaClientesVOCriteriaCnpjEstCompleto";
        String chave = "tipo_cliente";
        ConsultaClientesVOImpl vo = this.getConsultaClientesVO1();
        
        ViewObjectImpl vo2 = executaCriteria(vo, nomeCriteria, chave, tipoCliente, null);
               
        if(vo2.getRowCount() == 1) {
            Row row = vo.getRowAtRangeIndex(0);
            result = parseTexto(row.getAttribute("CodigoR3"));
        }
        
        if(vo2.getRowCount() > 1) {
            result = "cnpjDuplicado";
        }
        
        return result;
    }
    
    /**
     * Method responsible for locating Client from full CPF
     *
     * @param parametros
     * @return Objetc String
     */
    public String localizaCpfCompleto(Map parametros) {
        String result = "";
        String tipoCliente = (String) parametros.get("campoTipoCliente");
        String nomeCriteria = "ConsultaClientesVOCriteriaCnpjEstCompleto";
        String chave = "tipo_cliente";
        ConsultaClientesVOImpl vo = this.getConsultaClientesVO1();
        
        ViewObjectImpl vo2 = executaCriteria(vo, nomeCriteria, chave, tipoCliente, null);
        
        if(vo2.getRowCount() == 1) {
            Row row = vo.getRowAtRangeIndex(0);
            result = parseTexto(row.getAttribute("CodigoR3"));
        }
        
        if(vo2.getRowCount() > 1) {
            result = "cpfDuplicado";
        }
        
        return result;
    }
    
    /**
     * Method responsible for locating the parents researched customer
     *
     * @param parametros
     * @return Object String
     */
    public String localizaPaisCliente(Map parametros) {
        String result = "";
        String siglaPais = (String) parametros.get("paisCliente");
        String nomeCriteria = "ArLocationValuesVCriteria";
        String chave = "sigla";
        ArLocationValuesVImpl vo = this.getArLocationValuesV1();
        
        ViewObjectImpl vo2 = executaCriteria(vo, nomeCriteria, chave, siglaPais, null);
        
        if(vo2.getRowCount() == 1) {
            Row row = vo.getRowAtRangeIndex(0);
            result = parseTexto(row.getAttribute("SiglaPais"));
        }
        
        return result;
    }
    
    /**
     * Method responsible for locating Client from full EST
     *
     * @param parametros
     * @return Objetc String
     */
    public String localizaCodEstrangeiroCliente(Map parametros) {
        String result = "";
        String tipoCliente = (String) parametros.get("campoTipoCliente");
        String nomeCriteria = "ConsultaClientesVOCriteriaCnpjEstCompleto";
        String chave = "tipo_cliente";
        ConsultaClientesVOImpl vo = this.getConsultaClientesVO1();
        
        ViewObjectImpl vo3 = executaCriteria(vo, nomeCriteria, chave, tipoCliente, null);
        
               
        if(vo3.getRowCount() == 1) {
            Row row = vo.getRowAtRangeIndex(0);
            result = parseTexto(row.getAttribute("CodigoR3"));
        }
        
        if(vo3.getRowCount() > 1) {
            result = "estDuplicado";
        }
        
        return result;
    }
    
    /**
     * Method responsible for assembling the paramentros the generic form of Criteria
     * 
     * @param vo
     * @param nomeCriteria
     * @param chave
     * @param valor
     * @param AttrList
     * @return Object ViewObjectImpl
     */
    public ViewObjectImpl executaCriteria(ViewObjectImpl vo, String nomeCriteria, 
                                 String chave, Object valor, AttributeList AttrList) {
         vo.setWhereClause(null);
         vo.executeEmptyRowSet();
         ViewCriteria criteria = vo.getViewCriteria(nomeCriteria);
         vo.applyViewCriteria(criteria);
         if(AttrList != null 
            && AttrList.getAttributeCount() > 0) {
             vo.setNamedWhereClauseParams(AttrList);
         } else {
             vo.setNamedWhereClauseParam(chave, valor);
         }
         vo.executeQuery();
         
         return vo;
     }
    
    /**
     * Method responsible for return true or false if the client has the opportunity DRPS
     *
     * @param parametros
     * @return Object Boolean
     */
    public boolean getOportunidadeDRPS(Map parametros) {
        String partySiteId = (String) parametros.get("partySiteId");
        String SQL = "SELECT COUNT(1) FROM aso_quote_headers_all WHERE attribute4 IS NOT NULL AND invoice_to_party_site_id = '" + partySiteId + "'";
        stmt = getDBTransaction().createPreparedStatement(SQL, 1);
        try {
            rs = stmt.executeQuery();
            if(rs.next()) {
                int result = rs.getInt("COUNT(1)");
                if(result == 0) {
                    return false;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return true;
    }
    
    /**
     * Method responsible for return true or false if the client has the opportunity GNE
     *
     * @param parametros
     * @return Object Boolean
     */
    public boolean getOportunidadeGNE(Map parametros) {
        String partySiteId = (String) parametros.get("partySiteId");
        String SQL = "SELECT COUNT(1) FROM u536_pe_proposta WHERE party_site_id = '" + partySiteId + "'";
        stmt = getDBTransaction().createPreparedStatement(SQL, 1);
        try {
            rs = stmt.executeQuery();
            if(rs.next()) {
                int result = rs.getInt("COUNT(1)");
                if(result == 0) {
                    return false;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return true;
    }
    
    /**
     * Method responsible for performing the procedure to cancel customer
     *
     * @param parametros
     * @return Object Map
     */
    public Map execProcCancelarCliente(Map parametros) {
        HashMap map = new HashMap<String, Object>();
        String codCliente = (String) parametros.get("codigoR3");
        Integer userId = Integer.parseInt(this.getUserId());
        String codigoErro = "";
        String msgErro    = "";
        try {
            cStmt = getDBTransaction().createCallableStatement("{call gcl.u707_cc_ajuste_cadastro_pk.u707_desativa_clientes_crm_pr(?,?,?,?)}",1);
            cStmt.setString(1, codCliente);
            cStmt.setInt(2, userId);
            cStmt.setString(3, codigoErro);
            cStmt.setString(4, msgErro);
            
            cStmt.registerOutParameter(1, java.sql.Types.VARCHAR);
            cStmt.registerOutParameter(2, java.sql.Types.INTEGER);
            cStmt.registerOutParameter(3, java.sql.Types.VARCHAR);
            cStmt.registerOutParameter(4, java.sql.Types.VARCHAR);
            
            cStmt.executeUpdate();
            
            map.put("codigoErro", parseTexto(cStmt.getString(3)));
            map.put("msgErro", parseTexto(cStmt.getString(4)));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return map;
    }
    
    /**
     * Method responsible for return true or false if the client has the Contract 
     *
     * @param parametros
     * @return Object Boolean
     */
    public boolean getContratos(Map parametros) {
        String partySiteId = (String) parametros.get("partySiteId");
        String SQL = "SELECT COUNT(1) FROM okc_k_party_roles_b WHERE  rle_code = 'CUSTOMER' AND  to_number(attribute1) = '" + partySiteId + "'";
        stmt = getDBTransaction().createPreparedStatement(SQL, 1);
        try {
            rs = stmt.executeQuery();
            if(rs.next()) {
                int result = rs.getInt("COUNT(1)");
                if(result == 0) {
                    return false;
                }
            }
        } catch (SQLException e) {
            return false;
        }

        return true;
    }
    
    /**
     * Method responsible for return true or false if the User has access to the page
     *
     * @param parametros
     * @return Object Boolean
     */
    public boolean getPrivilegioAcesso(Map parametros) {
        String userID = (String) parametros.get("userID");
        String SQL = "SELECT COUNT(1) FROM U536_BR_GRUPO_RECURSO_V WHERE user_id   = '"+userID+"' " +
            "AND ((role_name = 'Administrador GATEND' AND attribute1  = 'SIM') OR (role_name   = 'Aprovador GATEND' " + 
            "AND attribute1  = 'SIM') OR (role_name   = 'Assessor Comercial' AND attribute1  = 'SIM') " +
            "OR (role_name   = 'Apoio a Vendas' AND attribute1  = 'SIM'))";
        System.out.println("Query " + SQL);
        stmt = getDBTransaction().createPreparedStatement(SQL, 1);
        try {
            rs = stmt.executeQuery();
            if(rs.next()) {
                int result = rs.getInt("COUNT(1)");
                if(result == 0) {
                    return false;
                }
            }
        } catch (SQLException e) {
            return false;
        }

        return true; 
    }
    
    /**
     * Method responsible for turning on Object Text
     *
     * @param objeto
     * @return String object
     */
    public static String parseTexto(Object objeto) {
        String texto = "";
        try {
            if (objeto != null) {
                texto = objeto.toString();
            }
        } catch (Exception e) {
            return "";
        }
        return texto;
    }
    
    /**
     * Method responsible for locating a client from CodR3
     *
     * @param parametros
     * @return Object Map
     */
    public Map localizarClientePeloCodigoR3(Map parametros) {
        String codigoR3 = String.valueOf(parametros.get("codigoR3"));
        String nomeCriteria = "ConsultaClientePorCodR3VOCriteria";
        String chave = "codigo_R3";
        HashMap map = new HashMap<String, Object>();
        ConsultaClientesVOImpl vo = this.getConsultaClientesVO1();
        
        ViewObjectImpl vo2 = executaCriteria(vo, nomeCriteria, chave, codigoR3, null);
        
        if(vo2.getRowCount() <= 0) {
            map.put("resultQuery", "true");
        }
        if(vo2.getRowCount() == 1) {
            Row row = vo2.getRowAtRangeIndex(0);
            map.put("resultQuery", "false");
            map.put("codigoR3", parseTexto(row.getAttribute("CodigoR3")));
            map.put("razaoSocial", parseTexto(row.getAttribute("RazaoSocial")));
            map.put("razaoSocial2", parseTexto(row.getAttribute("NomeRazao2")));
            map.put("tipoCliente", parseTexto(row.getAttribute("TipoCliente")));
            map.put("logradouro", parseTexto(row.getAttribute("Logradouro")));
            map.put("bairro", parseTexto(row.getAttribute("Bairro")));
            map.put("cidade", parseTexto(row.getAttribute("Cidade")));
            map.put("estado", parseTexto(row.getAttribute("Estado")));
            map.put("origem", parseTexto(row.getAttribute("Origem")));
            map.put("perfil", parseTexto(row.getAttribute("Perfil")));
            map.put("principal", parseTexto(row.getAttribute("Principal")));
            map.put("quadra", parseTexto(row.getAttribute("Quadra")));
            map.put("lote", parseTexto(row.getAttribute("Lote")));
            map.put("numero", parseTexto(row.getAttribute("Numero")));
            map.put("complemento", parseTexto(row.getAttribute("Complemento")));
            map.put("cep", parseTexto(row.getAttribute("Cep")));
            map.put("pais", parseTexto(row.getAttribute("Pais")));
            map.put("grupoContas", parseTexto(row.getAttribute("GrupoContas")));
            map.put("aprovacao", parseTexto(row.getAttribute("Aprovacao")));
            map.put("statusCliente", parseTexto(row.getAttribute("StatusCliente")));
            map.put("partySiteId", parseTexto(row.getAttribute("PartySiteId")));
        }
        
        return map;
    }
    
    /**
     * Method responsible for returning the name of the logged in User
     *
     * @return Object String
     */
    private String getUserName() {
        ADFContext adfCtx = ADFContext.getCurrent();
        SecurityContext secCntx = adfCtx.getSecurityContext();
        String user = secCntx.getUserPrincipal().getName();
        
        return user;
    }
    
    /**
     * Method responsible for returning the idUser of the logged in User
     *
     * @return Object String
     */
    public String getUserId() {
        ViewObjectImpl fndUserVO = this.getFndUserVO1();
        ViewCriteria myParamViewCriteria = fndUserVO.getViewCriteria("FndUserVOCriteriaByUserName");
        fndUserVO.applyViewCriteria(myParamViewCriteria);
        fndUserVO.setNamedWhereClauseParam("txtUserName", this.getUserName());
        fndUserVO.executeQuery();

        Row row = fndUserVO.getRowAtRangeIndex(0);

        return String.valueOf(row.getAttribute("UserId"));
    }
    
    /**
     * Method responsible for return true or false if the client has privilege to access page
     *
     * @param parametros
     * @return Object Map
     */
    public boolean validaPrivilegioAcessoClientes(Map parametros) {
        
        U536BrRolesMenuVVOImpl vo = this.getU536BrRolesMenuVVO1();
        ViewCriteria viewCriteria = vo.getViewCriteria("VerificaPrivilegioCriteria");
        vo.applyViewCriteria(viewCriteria);
        vo.setNamedWhereClauseParam("chaveUsuario", parseTexto(parametros.get("chaveUsuario")));
        vo.executeQuery();
        
        try {
            if (vo.getRowCount() > 0) {
                Row row = vo.getRowAtRangeIndex(0);
                if(ROLE_GESTAO_CLIENTE.equalsIgnoreCase(parseTexto(row.getAttribute("RoleName")))) {
                    return true;
                }
            }
        } catch(Exception e) {
            return false;
        }

        return false;
    }
    

    /**
     * Container's getter for ConsultaClientesVO1.
     * @return ConsultaClientesVO1
     */
    public ConsultaClientesVOImpl getConsultaClientesVO1() {
        return (ConsultaClientesVOImpl) findViewObject("ConsultaClientesVO1");
    }

    /**
     * Container's getter for ArLocationValuesV1.
     * @return ArLocationValuesV1
     */
    public ArLocationValuesVImpl getArLocationValuesV1() {
        return (ArLocationValuesVImpl) findViewObject("ArLocationValuesV1");
    }

    /**
     * Container's getter for FndUserVO1.
     * @return FndUserVO1
     */
    public FndUserVOImpl getFndUserVO1() {
        return (FndUserVOImpl) findViewObject("FndUserVO1");
    }

    /**
     * Container's getter for U536BrRolesMenuVVO1.
     * @return U536BrRolesMenuVVO1
     */
    public U536BrRolesMenuVVOImpl getU536BrRolesMenuVVO1() {
        return (U536BrRolesMenuVVOImpl) findViewObject("U536BrRolesMenuVVO1");
    }
}

